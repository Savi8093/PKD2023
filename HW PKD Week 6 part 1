// DATA SPECIFICATION AND EXAMPLES
/**
 * A {Course} is ...
 */

// 0 - course code
// 1 - course name
// 2 - max number of students
// 3 - students 
// 4 - wait list
let courses = [
    ["1DL201", "Programkonstruktion och Datastrukturer", 20, [], []],
    ["1MA004", "Algebra 1", 10, [], []],
    ["1MA010", "Baskurs i Matematik", 3, [], []]
];

let max_students = [];
let students = [];
let wait_list = [];

// Helper function to check if course exists.
function is_course(code) {
    for (let i = 0; array_length(courses) > i; i = i + 1) {
        if(courses[i][0] === code) {
            return true;
        }
    }
    display("Course does not exist.");
    return false;
}

/**
 * Applies a student to a course.
 * @example
 * // Applies "Oliver" "19941208-1234" to "1DL201"
 * apply("Oliver", "19941208-1234", "1DL201");
 * @param {string} ssn - Social security number of student to be applied.
 * @param {string} code - Course code for course to be applied to.
 */
function apply(name, ssn, code) { // edit freely, but do not rename
    if (is_course(code)) {
        for (let i = 0; i < array_length(courses); i = i + 1) {
            
            if (courses[i][0] === code) {
                
                if (array_length(courses[i][3]) >= courses[i][2]) {
                    let wait_position = array_length(courses[i][4]);
                    courses[i][4][wait_position] = [name, ssn];
                } else {
                    let class_position = array_length(courses[i][3]);
                    courses[i][3][class_position] = [name, ssn];
                }
            }
        }
        display_courses(courses);
    }
}

// Helper function to format output nicely.
function display_courses(courses) {
    display("Courses:");
    for (let i = 0; i < array_length(courses); i = i + 1) {
        display(courses[i][1]);
        display("Students:");
        for (let j = 0; j < array_length(courses[i][3]); j = j + 1) {
            display(courses[i][3][j][0]);
        }
        display("Waitlist:");
        for (let j = 0; j < array_length(courses[i][4]); j = j + 1) {
            display(courses[i][4][j][0]);
        }
    }
}

/**
 * Withdraw a student from a course.
 * @example
 * // Removes "19670702-1234" from "1DL201"
 * withdraw("19670702-1234", "1DL201");
 * @param {string} ssn - Social security number of student to be withdrawn.
 * @param {string} code - Course code for course to be withdrawn from.
 */
function withdraw(ssn, code) { // edit freely, but do not rename
    let result = [];
    
    if (is_course(code)) {
        for (let i = 0; i < array_length(courses); i = i + 1) {
            if (courses[i][0] === code) {
                for (let j = 0; j < array_length(courses[i][3]); j = j + 1) {
                    if (courses[i][3][j][1] !== ssn) {
                        let position = array_length(result);
                        result[position] = courses[i][3][j];
                    }
                }
                courses[i][3] = result;
            }
        }
        
        display_courses(courses);
    }
}

// TESTS
function test_apply_fail() {
    
}

function test_remove_fail() {
    
}

function test_apply_success() {
    
    courses = [
        [
            "1DL201", "Programkonstruktion och Datastrukturer", 3, 
            [
                ["Arne", "19941208-1234"],
                ["Test", "19670702-1234"],
                ["Kent", "19891118-1234"]
            ], 
            []
        ],
        ["1MA004", "Algebra 1", 10, [], []],
        ["1MA010", "Baskurs i Matematik", 3, [], []]
    ];
    
    apply("Oliver", "19941208-1234", "1DL201");
}

function test_remove_success() {
   
   courses[0][3] = [
        ["Arne", "19941208-1234", "1DL201"],
        ["Test", "19670702-1234", "1MA004"],
        ["Kent", "19891118-1234", "1MA010"]
       ];
       
   withdraw("19670702-1234", "1DL201");
}


//display(withdraw(), "Test Withdraw 1: "); // edit freely, and add more tests.
//test_apply_success();
test_remove_success();

