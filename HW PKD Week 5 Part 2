// TO BE GRADED Märta Ågren Sandra Victorsson

// [Grading Scheme) Max 100xp
// *   0xp for totally wrong solutions
// * 25xp for solutions that make an attempt at solving the problem
// * 50xp for solutions that show general understanding but do not work, or if
//         only one of the functions is implemented
// * 75xp for solutions with minor mistakes: e.g.
//        - not all pixels are written
// * 100xp for correct solutions
// for minor style mistakes, deduct 25xp
// for major style issues, award no points

const WIDTH = 400;
const HEIGHT = 300;
const FPS = 15;



/**
 * Swaps the color channels of an image: R -> G -> B -> R.
 * @param {array} src - contains the source image
 * @param {array} dest - array where the channel-changed image is copied into
 */
function color_rotate(src, dest) {
    const width = image_width();
    const height = image_height();

    for (let y = 0; y < height; y = y + 1) {
        for (let x = 0; x < width; x = x + 1) {
            set_rgba(dest[y][x],
  	             blue_of(src[y][x]),
	             red_of(src[y][x]),
	             green_of(src[y][x]),
	             alpha_of(src[y][x]));
        }
    }
}

/**
 * Vertically flips an image.
 * @param {array} src - contains the source image
 * @param {array} dest - array where the flipped source image is copied into
 */
function flip_vertically(src, dest) {
    const width = image_width();
    const height = image_height();

    for (let i = 0; i < height; i = i + 1) {
        for (let j = 0; j < width; j = j + 1) {
            set_rgba(dest[height - 1 - i][j],
	             red_of(src[i][j]),
	             green_of(src[i][j]),
	             blue_of(src[i][j]),
	             alpha_of(src[i][j]));
        }
    }
}

/**
 * Creates an image with given dimensions with each pixel having maximal
 * intensity of red, green and blue.
 * @param {number} width - width of the image to be generated
 * @param {number} height - height of the image to be generated
 * @returns {array} Returns a 3 dimensional array representing the image
 */
function make_image(width, height) {
    const img = [];
    for (let i = 0; i < height; i = i + 1) {
        const row = []; // Creates a new Pixel
        img[i] = row;
        for (let j = 0; j < width; j = j + 1) {
            row[j] = [];
	        set_rgba(row[j], 255, 255, 255, 255);
        }
    }
    return img;
}

/**
 * Stacks the images produced by two filters one on top of another.
 * @param {function} filter1 - filter to apply on the top
 * @param {function} filter2 - filter to apply on the bottom
 * @returns {function} Returns a function that applies the filters.
 */
function stack(filter1, filter2) {
    const temp1 = make_image(WIDTH, HEIGHT);
    const temp2 = make_image(WIDTH, HEIGHT);

    return (src, dest) => {
        const width = image_width();
        const height = image_height();
        const half_height = math_floor(height / 2);

        filter1(src, temp1);
        filter2(src, temp2);

        for (let i = 0; i < half_height; i = i + 1) {
            dest[i] = temp1[i * 2];
            dest[i + half_height] = temp2[i * 2];
        }

        // take last row from temp2, if height is odd
        for (let i = half_height * 2; i < height; i = i + 1) {
            dest[i] = temp2[i];
        }
    };
}

/**
 * Zooms into an image by a given factor.
 * @precondition factor > 0
 * @param {number} factor - specifies how much to zoom in
 * @returns {function} Returns a function that takes a source and destination
 *     image and applies the zoom.
 */
function zoom(factor) {
    const temp = make_image(WIDTH, HEIGHT);

    return (src, dest) => {
        const width = image_width();
        const height = image_height();
        const displacement_x = math_floor((width - width / factor) / 2);
        const displacement_y = math_floor((height - height / factor) / 2);

        for (let i = 0; i < height; i = i + factor) {
            const zoom_i = math_floor(i / factor + displacement_y);
            for (let k = 0; k < factor; k = k + 1) {
                for (let j = 0; j < width; j = j + factor) {
                    const zoom_j = math_floor(j / factor + displacement_x);
                    for (let m = 0; m < factor; m = m + 1) {
                        dest[i + k][j + m] = src[zoom_i][zoom_j];
                    }
                }
            }
        }
    };
}

/**
 * Shows the result of two filters side-by-side.
 *
 * @param {function} filter1 - filter to apply on the left
 * @param {function} filter2 - filter to apply on the right
 * @returns {function} Returns a function that applies the filters.
 */
function beside(filter1, filter2) {
    const temp1 = make_image(WIDTH, HEIGHT);
    const temp2 = make_image(WIDTH, HEIGHT);

    return (src, dest) => {
        const width = image_width();
        const height = image_height();
        const half_width = math_floor(width / 2);

        filter1(src, temp1);
        filter2(src, temp2);

        for (let i = 0; i < height; i = i + 1) {
            for (let j = 0; j < half_width; j = j + 1) {
                dest[i][j] = temp1[i][j * 2];
                dest[i][j + half_width] = temp2[i][j * 2];
            }
        }

        // take last row from temp2, if width is odd
        for (let i = 0; i < height; i = i + 1) {
            for (let j = half_width * 2; j < width; j = j + 1) {
                dest[i][j] = temp2[i][j];
            }
        }
    };
}


install_filter(stack(beside(flip_vertically, color_rotate),
                     beside(copy_image, zoom(2))));
//install_filter(beside(color_rotate, color_rotate));
//install_filter(beside(flip_vertically, zoom(3)));
//install_filter(zoom(10));


use_image_url("https://upload.wikimedia.org/wikipedia/commons/3/31/William_Shakespeare_1609.jpg");
set_dimensions(WIDTH, HEIGHT);
keep_aspect_ratio(true);
set_fps(FPS);
start();
